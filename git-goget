#!/usr/bin/env bash
set -euo pipefail

VERSION="0.1.1"

trap 'fail "Unexpected error on line $LINENO ($?)"' ERR

# Check if required commands exist
if ! command -v git >/dev/null 2>&1; then
  echo "Error: git command not found" >&2
  exit 1
fi

fail() {
  echo "Error: $*" >&2
  exit 1
}

# Extract host, owner and repo from Git hosting URL
parse_git_url() {
  local url=$1
  local original_url="$url"
  
  # Remove protocol prefix
  url=${url#https://}
  url=${url#http://}
  url=${url#git@}
  
  # Extract host and path
  local host=""
  local path=""
  
  if [[ "$url" =~ ^([^/:]+):(.+)$ ]]; then
    # SSH format: host:path
    host="${BASH_REMATCH[1]}"
    path="${BASH_REMATCH[2]}"
  elif [[ "$url" =~ ^([^/]+)/(.+)$ ]]; then
    # HTTPS format: host/path
    host="${BASH_REMATCH[1]}"
    path="${BASH_REMATCH[2]}"
  else
    fail "Invalid Git URL format. Expected: https://host/owner/repo or git@host:owner/repo"
  fi
  
  # Remove .git suffix if present
  path=${path%.git}
  
  # Should now have owner/repo format
  if [[ ! "$path" =~ ^[^/]+/[^/]+$ ]]; then
    fail "Invalid repository path format. Expected: owner/repo"
  fi
  
  # Output in format: host:owner/repo
  echo "$host:$path"
}

cmd_get() {
  local root_dir=""
  local github_url=""
  local root_specified_explicitly=false
  
  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case $1 in
      --root)
        root_dir="$2"
        root_specified_explicitly=true
        shift 2
        ;;
      *)
        git_url="$1"
        shift
        ;;
    esac
  done
  
  # Determine root directory based on priority:
  # 1. Explicitly specified --root
  # 2. GIT_GOGET_ROOT environment variable
  # 3. Git config "user.rootDirectory" entry
  # 4. Default ~/src
  if [[ "$root_specified_explicitly" == false ]]; then
    if [[ -n "${GIT_GOGET_ROOT:-}" ]]; then
      root_dir="$GIT_GOGET_ROOT"
    else
      local git_config_root
      git_config_root=$(git config --get user.rootDirectory 2>/dev/null || echo "")
      if [[ -n "$git_config_root" ]]; then
        root_dir="$git_config_root"
      else
        root_dir="$HOME/src"
      fi
    fi
  fi
  
  if [ -z "$git_url" ]; then
    cmd_help
    exit 1
  fi

  # Parse the Git URL to extract host, owner and repo
  local host_and_repo
  host_and_repo=$(parse_git_url "$git_url")
  
  # Split host and owner/repo
  local host="${host_and_repo%%:*}"
  local owner_repo="${host_and_repo#*:}"

  # Expand tilde in root_dir if present
  root_dir="${root_dir/#\~/$HOME}"

  # Create root directory if it doesn't exist
  if [ ! -d "$root_dir" ]; then
    mkdir -p "$root_dir"
  fi

  # Create host directory if it doesn't exist
  local host_dir="$root_dir/$host"
  if [ ! -d "$host_dir" ]; then
    mkdir -p "$host_dir"
  fi

  # Destination directory
  local dest_dir="$host_dir/$owner_repo"

  # Check if directory already exists
  if [ -d "$dest_dir" ]; then
    cd "$dest_dir"
    if git rev-parse --git-dir > /dev/null 2>&1; then
      git pull > /dev/null 2>&1
    else
      fail "Directory exists but is not a git repository: $dest_dir"
    fi
  else
    # Clone the repository
    git clone "$git_url" "$dest_dir" > /dev/null 2>&1
  fi
}

cmd_version() {
  echo "git-goget ${VERSION}"
}

cmd_help() {
  cat <<'EOF'
Clone Git repositories to a structured directory layout.

USAGE
  git goget [options] <git-url>

OPTIONS
  --root <directory>  Specify the root directory for cloning (overrides git config)

COMMANDS
  <git-url>     Clone the specified Git repository to <root>/<host>/owner/repo
  version       Show git-goget version
  --help        Show this help message

ROOT DIRECTORY PRIORITY
  1. Explicitly specified --root option (highest priority)
  2. GIT_GOGET_ROOT environment variable
  3. Git config "user.rootDirectory" entry (git config user.rootDirectory <directory>)
  4. Default ~/src (fallback)

EXAMPLES
  git goget https://github.com/rails/rails                  # Clone to root directory
  git goget --root ~/Documents https://github.com/rails/rails   # Clone to ~/Documents/github.com/rails/rails
  export GIT_GOGET_ROOT=~/workspace                        # Set environment variable
  git goget https://github.com/rails/rails                  # Now clones to ~/workspace/github.com/rails/rails
  git config user.rootDirectory ~/myprojects               # Set default root in git config
  git goget https://github.com/rails/rails                  # Clones to ~/myprojects/github.com/rails/rails
  git goget git@github.com:rails/rails.git                  # Same as above, using SSH URL
  git goget version                                          # Show version

DESCRIPTION
  This tool clones Git repositories to a structured directory layout under a specified root directory.
  It supports various Git hosting services including GitHub, GitLab, Bitbucket, and others.
  If the repository already exists, it will update it by running 'git pull'.
  
  The directory structure follows the pattern:
    <root>/<host>/owner/repository

  The root directory is determined by the following priority:
  1. --root option (if specified)
  2. GIT_GOGET_ROOT environment variable (if set)
  3. git config "user.rootDirectory" value (if set)
  4. ~/src (default fallback)

SUPPORTED HOSTS
  - github.com
  - gitlab.com
  - bitbucket.org
  - And any other Git hosting service

ENVIRONMENT
  GIT_GOGET_ROOT      # Set default root directory (overrides git config)
EOF
}

cmd_completion() {
  cat <<'EOF'
# bash completion for git goget

_git_goget() {
  local cur prev
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"

  case "$prev" in
    goget)
      COMPREPLY=( $(compgen -W "version --help" -- "$cur") )
      return 0
      ;;
  esac

  return 0
}

complete -F _git_goget git-goget
EOF
}

case "${1:-}" in
  "" | "-h" | "--help")  cmd_help ;;
  "version")             cmd_version ;;
  "completion")          cmd_completion ;;
  *)                     cmd_get "$@" ;;
esac
